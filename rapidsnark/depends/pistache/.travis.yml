language: cpp

os: linux
dist: bionic

branches:
  only:
    - master

# Note that we're not making use of the matrix expansion that Travis provides -
# it doesn't work very well for our collection of builds that each require a
# combination of environment variables and packages that need to be defined
# per-job in the jobs.include list. Jobs defined in the include key don't
# modify or extend job specifications from the matrix, and actually add a whole
# new job to the matrix (!), so using the matrix would leave us with a
# subset of jobs being under-specified.
# To get around this, we're using YAML anchors and aliases to avoid repeating
# config across different builds.

# The following keys prefixed with an underscore are not directly interpreted by
# Travis, and are used to provide a centralised config store for config that
# gets referenced inside the jobs.include map.
# The apt addon can take nested lists in its subkeys (and flattens them), so we
# use that to our advantage to merge a list of generic packages with a list of
# job-specific packages in YAML.
_apt_pkgs: &_apt_pkgs
  - 'apport'
  - 'cmake'
  - 'libssl-dev'
  - 'libcurl4-openssl-dev'
  - 'gdb'
  - 'lcov'
  - 'cppcheck'
  - 'clang-format-9'

_apt_srcs: &_apt_srcs
  - 'ubuntu-toolchain-r-test'

_env_clang_4: &_env_clang_4
  - COMPILER=clang++-4.0
  - COV_TOOL=llvm-cov-4.0
  - COV_TOOL_ARGS=gcov

_env_clang_5: &_env_clang_5
  - COMPILER=clang++-5.0
  - COV_TOOL=llvm-cov-5.0
  - COV_TOOL_ARGS=gcov

_env_clang_6: &_env_clang_6
  - COMPILER=clang++-6.0
  - COV_TOOL=llvm-cov-6.0
  - COV_TOOL_ARGS=gcov

_env_gcc_7: &_env_gcc_7
  - COMPILER=g++-7
  - COV_TOOL=gcov-7
  - COV_TOOL_ARGS=

_env_gcc_8: &_env_gcc_8
  - COMPILER=g++-8
  - COV_TOOL=gcov-8
  - COV_TOOL_ARGS=

jobs:
  include:
  # Linux clang builds
  - arch: amd64
    env: *_env_clang_4
    addons:
      apt:
        sources: 
          - *_apt_srcs
          - ['llvm-toolchain-bionic-4.0']
        packages: 
          - *_apt_pkgs
          - ['clang-4.0', 'llvm-4.0-tools', 'libstdc++-6-dev']

  - arch: amd64
    env: *_env_clang_5
    addons:
      apt:
        sources:
          - *_apt_srcs
          - ['llvm-toolchain-bionic-5.0', 'fish']
        packages: 
          - *_apt_pkgs
          - ['clang-5.0', 'llvm-5.0-tools', 'libstdc++-6-dev']

  - arch: amd64
    env: *_env_clang_6
    addons:
      apt:
        sources:
          - *_apt_srcs
          - ['llvm-toolchain-bionic-6.0']
        packages: 
          - *_apt_pkgs
          - ['clang-6.0', 'llvm-6.0-tools', 'libstdc++-6-dev']

  # Linux GCC builds
  - arch: amd64
    env: *_env_gcc_7
    addons:
      apt:
        sources:
          - *_apt_srcs
        packages: 
          - *_apt_pkgs
          - ['g++-7']

  - arch: amd64
    env: *_env_gcc_8
    addons:
      apt:
        sources:
          - *_apt_srcs
        packages: 
          - *_apt_pkgs
          - ['g++-8']

  - arch: ppc64le
    env: *_env_gcc_8
    addons:
      apt:
        sources:
          - *_apt_srcs
        packages: 
          - *_apt_pkgs
          - ['g++-8']

  - arch: s390x
    env: *_env_gcc_8
    addons:
      apt:
        sources:
          - *_apt_srcs
        packages: 
          - *_apt_pkgs
          - ['g++-8']

  - arch: arm64
    env: *_env_gcc_8
    addons:
      apt:
        sources:
          - *_apt_srcs
        packages: 
          - *_apt_pkgs
          - ['g++-8']

before_install:
  # Check source code formatting
  - if [ $TRAVIS_PULL_REQUEST != "false" ]; then changed_src=$(git diff --name-only master...HEAD | egrep "\.(h|cc)$" | grep -v "include/pistache/thirdparty" || [ $? == 1 ]); fi
  - if [ ! -z "$changed_src" ]; then git-clang-format-9 --quiet --binary $(which clang-format-9) --style llvm --diff master HEAD -- $changed_src > ./clang-format-diff; fi
  - if [ -s ./clang-format-diff ]; then cat ./clang-format-diff && echo "Format source code according to LLVM style, please" && false; fi

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

before_script:
  - export CXX=${COMPILER}
  - cd ${TRAVIS_BUILD_DIR}

  # Enable core dumps
  - ulimit -c
  - ulimit -a -S
  - ulimit -a -H
    # Make sure that crash reports are generated for all executables.
  - mkdir -p ~/.config/apport
  - printf '[main]\nunpackaged=true\n' >> ~/.config/apport/settings

  # Print debug system information
  - cat /proc/sys/kernel/core_pattern
  - cat /etc/default/apport || true
  - service --status-all || true
  - initctl list || true

  # Debug build
  - cmake -H.
    -BBuild-Debug
    -DCMAKE_BUILD_TYPE=Debug
    -DPISTACHE_BUILD_EXAMPLES=true
    -DPISTACHE_BUILD_TESTS=true
    -DPISTACHE_USE_SSL=true

  # Debug build, no SSL
  - cmake -H.
    -BBuild-Debug-nossl
    -DCMAKE_BUILD_TYPE=Debug
    -DPISTACHE_BUILD_EXAMPLES=true
    -DPISTACHE_BUILD_TESTS=true
    -DPISTACHE_USE_SSL=false

  # Release build
  - cmake -H.
    -BBuild-Release
    -DCMAKE_BUILD_TYPE=Release
    -DPISTACHE_USE_SSL=true

script:
  # Set the ulimit
  - ulimit -c unlimited -S

  # Debug build
  - cd Build-Debug
  - make -j 2 all test ARGS="-V"

  # Debug build, no SSL
  - cd ../Build-Debug-nossl
  - make -j 2 all test ARGS="-V"

  # Release build
  - cd ../Build-Release
  - make -j 2

after_failure:
  - CRASHFILES=$(find /var/crash/ -mindepth 1 -maxdepth 1 -print)
  - echo "$CRASHFILES"
    # Unpack the apport crash file into a temporary directory and get the
    # executable and core dump to pass to GDB.
    # Call gdb with the absolute path since it isn't on the PATH.
  - |
    if [ -n "$CRASHFILES" ]; then echo "$CRASHFILES" | while IFS= read -r CRASH; do echo "Crash report: $CRASH"; DIR="/tmp/$(basename $CRASH).d"; apport-unpack "$CRASH" "$DIR"; EXE=$(cat $DIR/ExecutablePath); CORE="$DIR/CoreDump"; echo "Coredump $CORE for $EXE"; /usr/bin/gdb $EXE $CORE -ex "thread apply all bt" -ex "set pagination 0" -batch; done; fi

after_success:
  - cd ../Build-Debug
  - sudo su -c "echo 'if [ \"\$1\" = \"-v\" ] ; then $COV_TOOL --version ; else $COV_TOOL $COV_TOOL_ARGS \$@ ; fi' > /usr/local/bin/cov-tool" && sudo chmod +x /usr/local/bin/cov-tool
  - lcov --capture --gcov-tool cov-tool --directory . --output-file coverage.info
  - lcov --remove coverage.info '/usr/*' '*tests/*' '*third-party/*' --output-file coverage.info
  - lcov --list coverage.info
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

